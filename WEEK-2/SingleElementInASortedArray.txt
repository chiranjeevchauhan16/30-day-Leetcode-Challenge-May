class Solution {
    public int singleNonDuplicate(int[] nums) {
        
        // run in O(n)
//         HashSet<Integer> setlist=new HashSet<>();
        
//         for(int temp:nums){
//             setlist.add(temp);
//         }
        
//         int sumSet=0;
        
//         for(int temp:setlist){
            
//             sumSet+=temp;
//         }
//         int overAllSum=0;
//         for(int i=0;i<nums.length;i++){
//             overAllSum+=nums[i];
//         }
        
//         return ((2*sumSet) -overAllSum);
        
        // binary way run in O(logn)
        int left = 0, right = nums.length-1;
        while(left < right){
            int mid = (left + right)/2;
            if( (mid % 2 == 0 && nums[mid] == nums[mid +1]) || 
                   (mid %2 == 1 && nums[mid] == nums[mid - 1]) )
                left = mid + 1;
            else
                right = mid;
        }
        return nums[left];
        
    }
}