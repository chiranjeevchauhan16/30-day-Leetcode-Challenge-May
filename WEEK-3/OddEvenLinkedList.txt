/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// Input: 1->2->3->4->NULL
// Output: 1->3->5->2->4->NULL
class Solution {
    public ListNode oddEvenList(ListNode head) {
        
      // Corner case  
    if (head == null)  
        return null;  
  
    // Initialize first nodes of even and  
    // odd lists  
    ListNode odd = head;  
    ListNode even = head.next;  
  
    // Remember the first node of even list so  
    // that we can connect the even list at the  
    // end of odd list.  
    ListNode evenFirst = even;  
  
    while (1 == 1)  
    {  
        // If there are no more nodes,   
        // then connect first node of even   
        // list to the last node of odd list  
        if (odd == null || even == null || 
                        (even.next) == null)  
        {  
            odd.next = evenFirst;  
            break;  
        }  
  
        // Connecting odd nodes  
        odd.next = even.next;  
        odd = even.next;  
  
        // If there are NO more even nodes   
        // after current odd.  
        if (odd.next == null)  
        {  
            even.next = null;  
            odd.next = evenFirst;  
            break;  
        }  
  
        // Connecting even nodes  
        even.next = odd.next;  
        even = odd.next;  
    }  
    return head;  
        
        
    }
}