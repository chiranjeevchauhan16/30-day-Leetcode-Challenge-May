/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Index { 
  
    int index = 0; 
} 



class Solution {
    
    Index index=new Index();
    
    
    public TreeNode constructTreeUtil(int[] preorder, Index preIndex, int key, int min,int max, int size){
        
          // Base case 
        if (preIndex.index >= size) { 
            return null; 
        } 
  
        TreeNode root = null; 
        
        if(key> min && key< max){
            
            root=new TreeNode(key,null,null);
            preIndex.index=preIndex.index+1;
            
            if (preIndex.index < size) { 
  
                // Construct the subtree under root 
                // All nodes which are in range {min .. key}  
                // will go in left subtree, and first such  
                // node will be root of left subtree. 
                root.left = constructTreeUtil(preorder, preIndex,  
                            preorder[preIndex.index], min, key, size); 
  
                // All nodes which are in range {key..max}  
                // will go in right subtree, and first such 
                // node will be root of right subtree.
                if(preIndex.index<size)
                root.right = constructTreeUtil(preorder, preIndex,  
                             preorder[preIndex.index], key, max, size); 
            } 
            
        }
        
        return root;
    }
    
    public TreeNode bstFromPreorder(int[] preorder) {
       
        
        return constructTreeUtil(preorder, index, preorder[0], Integer.MIN_VALUE, 
                Integer.MAX_VALUE, preorder.length); 
        
        /*
          // The first element of pre[] is always root 
        TreeNode root = new TreeNode(preorder[0]); 
  
        Stack<TreeNode> s = new Stack<TreeNode>(); 
  
        // Push root 
        s.push(root); 
  
        // Iterate through rest of the size-1 items of given preorder array 
        for (int i = 1; i < preorder.length; ++i) { 
            TreeNode temp = null; 
  
            // Keep on popping while the next value is greater than 
           //  stack's top value. 
            while (!s.isEmpty() && preorder[i] > s.peek().val) { 
                temp = s.pop(); 
            } 
  
            // Make this greater value as the right child 
            // and push it to the stack 
            if (temp != null) { 
                temp.right = new TreeNode(preorder[i]); 
                s.push(temp.right); 
            }  
              
            // If the next value is less than the stack's top 
            // value, make this value as the left child of the  
            // stack's top node. Push the new node to stack 
            else { 
                temp = s.peek(); 
                temp.left = new TreeNode(preorder[i]); 
                s.push(temp.left); 
            } 
        } 
  return root;
    */
    }
}