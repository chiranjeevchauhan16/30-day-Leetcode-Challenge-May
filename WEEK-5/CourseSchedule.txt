class Solution {
    public boolean canFinish(int n, int[][] pre) {
	
	// creating the graph structure
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<n;i++)
            graph.add(new ArrayList<>());			        
        for(int []pr:pre)
            graph.get(pr[0]).add(pr[1]);
			
		int []vis=new int [n];
		// for 0<=i<n, vis[i] contains 3 values.
		// vis[i]=0, if the node is not visited yet.
		// vis[i]=-1, if the DFS exploration has started for the i-th node but not yet completed.
		// vis[i]=1, if the DFS exploration has both started for the i-th node and completed.
		
		
		// Checking for each component of the graph. This is necessary because the graph is directed and also the graph may not be a connected graph.		
        for(int i=0;i<n;i++)
            if(vis[i]==0&&!visit(graph,i,vis))
                return false;
				
        return true;
    } 
	
	// The following function returns false iff a cycle is found involving the current node or any node that can be reached starting from the current node, else returns true.
	
    public boolean visit(List<List<Integer>> graph, int i,int []vis){
        vis[i]=-1; // started exploring.
        for(int n: graph.get(i))
		// if we find vis[n]==-1, this means there is a cycle involving this node in the graph, because we can reach the current node from the node n, and also we can reach node n from the current node, in a directed graph, so there is definitely a cycle.
		// we will only explore if vis[n]==0, or the node n has not been explored.
            if(vis[n]==-1||vis[n]==0&&!visit(graph,n,vis)) 
                return false;
        vis[i]=1;        // exploration of the current node is complete.
        return true; // returning true because no cycle is present involving this node or any node that can be reached from this node.
    }
}